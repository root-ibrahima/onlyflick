import 'package:flutter/foundation.dart';
import '../../../core/services/api_service.dart';
import '../models/post_models.dart'; // ===== IMPORT UNIQUE DEPUIS POST_MODELS =====

/// Service pour la gestion des posts
class PostsService {
  final ApiService _apiService = ApiService();

  /// R√©cup√®re tous les posts visibles pour l'utilisateur connect√©
  Future<PostsResult> getAllPosts() async {
    try {
      debugPrint('üì± Fetching all visible posts');
      
      final response = await _apiService.get<dynamic>('/posts/all');

      if (response.isSuccess && response.data != null) {
        // ===== DEBUG : AFFICHER LA STRUCTURE JSON BRUTE =====
        debugPrint('üîç RAW JSON RESPONSE:');
        if (response.data is List && (response.data as List).isNotEmpty) {
          final firstPost = (response.data as List).first;
          debugPrint('üîç Premier post JSON: $firstPost');
          debugPrint('üîç Cl√©s disponibles: ${firstPost.keys.toList()}');
        }
        
        final posts = (response.data as List)
            .map((json) => Post.fromJson(json))
            .toList();
        
        debugPrint('üì± ${posts.length} posts fetched successfully');
        
        // ===== DEBUG DES USERNAMES =====
        for (final post in posts) {
          debugPrint('üìä Post ${post.id}: ${post.initialLikesCount} likes, author: ${post.authorDisplayName} (username: ${post.authorUsername})');
        }
        
        return PostsResult.success(posts);
      } else {
        debugPrint('‚ùå Failed to fetch posts: ${response.error}');
        return PostsResult.failure(response.error ?? 'Erreur de r√©cup√©ration des posts');
      }
    } catch (e) {
      debugPrint('‚ùå Posts fetch error: $e');
      return PostsResult.failure('Erreur lors de la r√©cup√©ration des posts');
    }
  }

  /// R√©cup√®re les posts d'un cr√©ateur sp√©cifique
  Future<PostsResult> getCreatorPosts(int creatorId, {bool subscriberOnly = false}) async {
    try {
      debugPrint('üì± Fetching posts from creator: $creatorId');
      
      String endpoint;
      if (subscriberOnly) {
        endpoint = '/posts/from/$creatorId/subscriber-only';
      } else {
        endpoint = '/posts/from/$creatorId';
      }

      final response = await _apiService.get<dynamic>(endpoint);

      if (response.isSuccess && response.data != null) {
        final posts = (response.data as List)
            .map((json) => Post.fromJson(json))
            .toList();
        
        debugPrint('üì± ${posts.length} posts from creator $creatorId fetched successfully');
        return PostsResult.success(posts);
      } else {
        debugPrint('‚ùå Failed to fetch creator posts: ${response.error}');
        return PostsResult.failure(response.error ?? 'Erreur de r√©cup√©ration des posts du cr√©ateur');
      }
    } catch (e) {
      debugPrint('‚ùå Creator posts fetch error: $e');
      return PostsResult.failure('Erreur lors de la r√©cup√©ration des posts du cr√©ateur');
    }
  }

  /// Like/Unlike un post
  Future<LikeToggleResult> toggleLike(int postId) async {
    try {
      debugPrint('‚ù§Ô∏è Toggling like for post: $postId');
      
      final response = await _apiService.post<Map<String, dynamic>>(
        '/posts/$postId/likes',
        fromJson: (json) => json,
      );

      if (response.isSuccess && response.data != null) {
        final liked = response.data!['liked'] ?? false;
        debugPrint('‚ù§Ô∏è Post $postId like toggled: $liked');
        return LikeToggleResult.success(liked);
      } else {
        debugPrint('‚ùå Failed to toggle like: ${response.error}');
        return LikeToggleResult.failure(response.error ?? 'Erreur lors du like');
      }
    } catch (e) {
      debugPrint('‚ùå Like toggle error: $e');
      return LikeToggleResult.failure('Erreur lors du like');
    }
  }

  /// R√©cup√®re le nombre de likes d'un post
  Future<LikesCountResult> getPostLikes(int postId) async {
    try {
      debugPrint('üìä Fetching likes count for post: $postId');
      
      final response = await _apiService.get<Map<String, dynamic>>(
        '/posts/$postId/likes',
        fromJson: (json) => json,
      );

      if (response.isSuccess && response.data != null) {
        final likesCount = response.data!['likes_count'] ?? 0;
        debugPrint('üìä Post $postId has $likesCount likes');
        return LikesCountResult.success(likesCount);
      } else {
        debugPrint('‚ùå Failed to fetch likes count: ${response.error}');
        return LikesCountResult.failure(response.error ?? 'Erreur de r√©cup√©ration des likes');
      }
    } catch (e) {
      debugPrint('‚ùå Likes count fetch error: $e');
      return LikesCountResult.failure('Erreur lors de la r√©cup√©ration des likes');
    }
  }

  /// R√©cup√®re les commentaires d'un post
  Future<CommentsResult> getPostComments(int postId) async {
    try {
      debugPrint('üí¨ Fetching comments for post: $postId');
      
      final response = await _apiService.get<dynamic>('/comments/post/$postId');

      if (response.isSuccess && response.data != null) {
        final comments = (response.data as List)
            .map((json) => Comment.fromJson(json))
            .toList();
        
        debugPrint('üí¨ ${comments.length} comments fetched for post $postId');
        
        // ===== DEBUG DES USERNAMES DES COMMENTAIRES =====
        for (final comment in comments) {
          debugPrint('üí¨ Comment ${comment.id}: by ${comment.authorDisplayName} (username: ${comment.authorUsername})');
        }
        
        return CommentsResult.success(comments);
      } else {
        debugPrint('‚ùå Failed to fetch comments: ${response.error}');
        return CommentsResult.failure(response.error ?? 'Erreur de r√©cup√©ration des commentaires');
      }
    } catch (e) {
      debugPrint('‚ùå Comments fetch error: $e');
      return CommentsResult.failure('Erreur lors de la r√©cup√©ration des commentaires');
    }
  }

  /// Ajoute un commentaire √† un post
  Future<CommentResult> addComment(int postId, String content) async {
    try {
      debugPrint('üí¨ Adding comment to post: $postId');
      
      final response = await _apiService.post<Map<String, dynamic>>(
        '/comments',
        body: {
          'post_id': postId,
          'content': content,
        },
        fromJson: (json) => json,
      );

      if (response.isSuccess && response.data != null) {
        final comment = Comment.fromJson(response.data!);
        debugPrint('üí¨ Comment added successfully to post $postId by ${comment.authorDisplayName}');
        return CommentResult.success(comment);
      } else {
        debugPrint('‚ùå Failed to add comment: ${response.error}');
        return CommentResult.failure(response.error ?? 'Erreur lors de l\'ajout du commentaire');
      }
    } catch (e) {
      debugPrint('‚ùå Add comment error: $e');
      return CommentResult.failure('Erreur lors de l\'ajout du commentaire');
    }
  }

  /// R√©cup√®re mes posts (pour l'utilisateur connect√©)
  Future<PostsResult> getMyPosts() async {
    try {
      debugPrint('üì± Fetching my posts');
      
      final response = await _apiService.get<dynamic>('/posts/me');

      if (response.isSuccess && response.data != null) {
        final posts = (response.data as List)
            .map((json) => Post.fromJson(json))
            .toList();
        
        debugPrint('üì± ${posts.length} of my posts fetched successfully');
        return PostsResult.success(posts);
      } else {
        debugPrint('‚ùå Failed to fetch my posts: ${response.error}');
        return PostsResult.failure(response.error ?? 'Erreur de r√©cup√©ration de vos posts');
      }
    } catch (e) {
      debugPrint('‚ùå My posts fetch error: $e');
      return PostsResult.failure('Erreur lors de la r√©cup√©ration de vos posts');
    }
  }

  /// R√©cup√®re les posts recommand√©s pour l'utilisateur connect√©
  Future<PostsResult> getRecommendedPosts() async {
    try {
      debugPrint('ü§ñ Fetching recommended posts for user');

      final response = await _apiService.get<dynamic>('/posts/recommended');

      if (response.isSuccess && response.data != null) {
        final posts = (response.data as List)
            .map((json) => Post.fromJson(json))
            .toList();

        debugPrint('ü§ñ ${posts.length} recommended posts fetched successfully');
        return PostsResult.success(posts);
      } else {
        debugPrint('‚ùå Failed to fetch recommended posts: ${response.error}');
        return PostsResult.failure(response.error ?? 'Erreur de r√©cup√©ration des posts recommand√©s');
      }
    } catch (e) {
      debugPrint('‚ùå Recommended posts fetch error: $e');
      return PostsResult.failure('Erreur lors de la r√©cup√©ration des posts recommand√©s');
    }
  }
}